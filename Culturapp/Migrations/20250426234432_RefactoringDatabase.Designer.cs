// <auto-generated />
using System;
using Culturapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Culturapp.Migrations
{
    [DbContext(typeof(CulturappDbContext))]
    [Migration("20250426234432_RefactoringDatabase")]
    partial class RefactoringDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CheckingUser", b =>
                {
                    b.Property<int>("ChecksId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ChecksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CheckingsUsers", (string)null);
                });

            modelBuilder.Entity("Culturapp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Culturapp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Culturapp.Models.Checking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Checkings");
                });

            modelBuilder.Entity("Culturapp.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("Culturapp.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<int?>("FAQId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SalesEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SalesStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("ScoreValue")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<double?>("TicketPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CheckingId")
                        .IsUnique();

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("FAQId")
                        .IsUnique();

                    b.HasIndex("LocationAddressId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Culturapp.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Culturapp.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("EventId");

                    b.ToTable("Telephones");
                });

            modelBuilder.Entity("Culturapp.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Culturapp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EventUsers", (string)null);
                });

            modelBuilder.Entity("CheckingUser", b =>
                {
                    b.HasOne("Culturapp.Models.Checking", null)
                        .WithMany()
                        .HasForeignKey("ChecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culturapp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Culturapp.Models.Enterprise", b =>
                {
                    b.HasOne("Culturapp.Models.Address", "Address")
                        .WithOne("Enterprise")
                        .HasForeignKey("Culturapp.Models.Enterprise", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Culturapp.Models.Event", b =>
                {
                    b.HasOne("Culturapp.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Culturapp.Models.Checking", "Checking")
                        .WithOne("Event")
                        .HasForeignKey("Culturapp.Models.Event", "CheckingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Culturapp.Models.Enterprise", "Enterprise")
                        .WithMany("Events")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Culturapp.Models.FAQ", "FAQ")
                        .WithOne("Event")
                        .HasForeignKey("Culturapp.Models.Event", "FAQId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Culturapp.Models.Address", "LocationAddress")
                        .WithOne("Event")
                        .HasForeignKey("Culturapp.Models.Event", "LocationAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Culturapp.Models.Status", "Status")
                        .WithMany("Events")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Checking");

                    b.Navigation("Enterprise");

                    b.Navigation("FAQ");

                    b.Navigation("LocationAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Culturapp.Models.Phone", b =>
                {
                    b.HasOne("Culturapp.Models.Enterprise", "Enterprise")
                        .WithMany("Phones")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Culturapp.Models.Event", "Event")
                        .WithMany("Phones")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Enterprise");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Culturapp.Models.User", b =>
                {
                    b.HasOne("Culturapp.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Culturapp.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.Navigation("Address");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("Culturapp.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Culturapp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Culturapp.Models.Address", b =>
                {
                    b.Navigation("Enterprise");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Culturapp.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Culturapp.Models.Checking", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("Culturapp.Models.Enterprise", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Culturapp.Models.Event", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Culturapp.Models.FAQ", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("Culturapp.Models.Status", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
